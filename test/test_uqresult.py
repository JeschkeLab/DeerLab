import numpy as np 
from deerlab import UQResult, dd_gauss
from deerlab.utils import ovl
from scipy.stats import chi2
import pytest 

# Fixtures
# --------------------------------------------------------------------------------------------
@pytest.fixture(scope='module')
def uncertainty_quantification_simulation(): 
    # Gaussian uncertainty distribution parameters
    std = [0.3,0.6]
    means = [5.0,4.0]

    # Covariance matrix
    covmat = np.diag(np.array(std)**2)

    # Bootstrapping
    samples = []
    for mean,sigma in zip(means,std): 
        np.random.seed(0)
        samples.append(sigma*np.random.randn(200000) + mean)

    # Reference percentiles
    p95,p50,p5 = np.zeros(2),np.zeros(2),np.zeros(2)
    for n,sample in enumerate(samples):
        p95[n] = np.percentile(samples[n],95)
        p5[n] = np.percentile(samples[n],5)
        p50[n] = np.percentile(samples[n],50)

    # Reference confidence intervals
    ci95,ci90,ci50 = np.zeros((2,2)),np.zeros((2,2)),np.zeros((2,2))
    for n,sample in enumerate(samples):
        ci95[n,:] = np.array([np.percentile(samples[n],2.5),np.percentile(samples[n],97.5)])
        ci90[n,:] = np.array([np.percentile(samples[n],5.0),np.percentile(samples[n],95.0)])
        ci50[n,:] = np.array([np.percentile(samples[n],25),np.percentile(samples[n],75)])

    # Profile likelihood simulation
    x = np.linspace(0,10,1000)
    pdf1 = dd_gauss(x,means[0],std[0])
    pdf2 = dd_gauss(x,means[1],std[1])
    pdf1 /= max(pdf1)
    pdf2 /= max(pdf2)
    σ = 0.01
    obj2likelihood = lambda f: 1/np.sqrt(σ*2*np.pi)*np.exp(-1/2*f/σ**2)
    likelihood2obj = lambda L: -2*np.log(L*np.sqrt(σ*2*np.pi))*σ**2
    threshold = lambda coverage: σ**2*chi2.ppf(coverage, df=1) + likelihood2obj(max(pdf1))
    profile1 = {'y': likelihood2obj(pdf1), 'x':x}
    profile2 = {'y': likelihood2obj(pdf2), 'x':x}

    # Construct uncertainty quantification objects
    uq_moment = UQResult('moment',data=np.array(means),covmat=covmat)
    uq_bootstrap = UQResult('bootstrap',data=np.vstack(samples).T)
    uq_profile = UQResult('profile',data=np.array(means),profiles=[profile1,profile2],threshold=threshold,noiselvl=σ)

    mock_objects = {'moment': uq_moment, 'bootstrap': uq_bootstrap, 'profile': uq_profile}
    references = {'mean': means, 'std': std, 'median': p50, 'ci':[ci50,ci90,ci95], 'percentile': [p5,p50,p95]}

    return mock_objects, references
# --------------------------------------------------------------------------------------------


# =================================================================================================
@pytest.mark.parametrize('attr', ['attr', 'mean', 'std', 'median', 'ci', 'percentile', 'pardist'])
@pytest.mark.parametrize('method', ['moment', 'bootstrap', 'profile'])
def test_uncertainty_quantitification_attributes(uncertainty_quantification_simulation, method, attr):
    """Check the attributes of the uncertainty quantification objects generated by the different methods"""
    
    # Retrieve the results of the mock simulation
    uq_objects, references = uncertainty_quantification_simulation
    
    # Get the UQResult object for the appropriate method
    uq = uq_objects[method]
    
    if attr=='mean':
        assert np.allclose(uq.mean,references['mean'],rtol=1e-2)
    elif attr=='std':
        assert np.allclose(uq.std,references['std'],rtol=1e-2)
    elif attr=='median':
        assert np.allclose(uq.median,references['median'],rtol=1e-2)

    elif attr=='ci':
        assert np.allclose(uq.ci(95),references['ci'][2],rtol=1e-2)
        assert np.allclose(uq.ci(90),references['ci'][1],rtol=1e-2)
        assert np.allclose(uq.ci(50),references['ci'][0],rtol=1e-2)

    elif attr=='percentile':
        assert np.allclose(uq.percentile(95),references['percentile'][2],rtol=1e-2)
        assert np.allclose(uq.percentile(50),references['percentile'][1],rtol=1e-2)
        assert np.allclose(uq.percentile( 5),references['percentile'][0],rtol=1e-2)

    elif attr=='pardist':
        x1,pdf1 = uq.pardist(0)
        x2,pdf2 = uq.pardist(1) 
        xs = [x1,x2]
        pdfs = [pdf1,pdf2]
        pdfs_ref = [dd_gauss(x,mean,sigma) for x,mean,sigma in zip(xs,references['mean'],references['std'])]
        assert ovl(pdfs[0],pdfs_ref[0])>0.99
        assert ovl(pdfs[1],pdfs_ref[1])>0.99
# =================================================================================================
